#!/bin/bash
#
#Automate Project Creation - NodeJS, ReactJS...

deps=("yarn")

for i in ${deps[@]}; do
  if [[ ! $(which $i 2>/dev/null) ]]; then
    echo "Need to install: $i."
    exit 1
  fi
done

usage() {
  cat <<EOF

    Project creation - NodeJS, ReactJS ...

    -h, --help      Show help
    -v, --version   Show version

    * Version 1.0

EOF
}

askForWay() {
  read -p "Where do you want to create the project? (way after home): " way
  route=$HOME"/"$way

  if [ -e "$route" ]; then
    askForName
  else
    echo -e "Invalid path..."
    askForWay
  fi
}

askForName() {
  read -p "What is the name of the project to be created?: " name
  path=$route"/"$name

  if [ -e "$path" ]; then
    echo -e "\r\nThis directory already exists! Choose another name ..."
    askForName
  else
    read -n1 -p "The project path will be this: \"$path\" [y/n]: " confirmation
    case $confirmation in
      Y | y) typeOfProject;;
      N | n) echo -e "\r\nOperation interrupted :-("; exit 0;;
      *) echo -e "\r\nInvalid Operation!"; askForName;;
    esac
  fi
}

typeOfProject() {
  echo -e "\r\n"
  echo -e "\033[01;32m|   What kind of project do you want to create?   |"
  echo -e "\033[01;32m|-------------------------------------------------|"
  echo -e "\033[01;32m|   1) NodeJS                                     |"
  echo -e "\033[01;32m|   2) NodeJS   (TypeScript)                      |"
  echo -e "\033[01;32m|   3) ReactJS                                    |"
  echo -e "\033[01;32m|   4) ReactJS  (TypeScript)                      |"
  echo -e "\033[01;32m|_________________________________________________|"

  read -n1 -p "|--> " project

  case $project in
    1) createNodeProject;;
    2) createNodeProjectWithTS;;
    3) echo react;;
    4) echo react ts;;
    *) echo -e "\033[01;31m\r\nOpção Inválida"; typeOfProject;;
  esac
}

createNodeProject() {
  mkdir $path
  cd $path
  yarn init -y
  yarn add express
  yarn add nodemon -D
  mkdir src
  touch src/server.js

  createGitignoreNode

  echo -e "\r\n\033[01;32mAdd the following code to \"package.json\":
  \"scripts\": {
    \"start\": \"nodemon ./src/server.js\"
  },
  "
}

createNodeProjectWithTS() {
  mkdir $path
  cd $path
  yarn init -y
  yarn add express
  yarn add typescript ts-node-dev -D
  mkdir src
  touch src/server.ts
  touch tsconfig.json

  createGitignoreNode

echo '{
  "compilerOptions": {
    "target": "ES2017",
    "module": "commonjs",
    "outDir": "./dist",
    "strict": true,
    "esModuleInterop": true,
    "skipLibCheck": true,
    "forceConsistentCasingInFileNames": true                            
  }
}' >> tsconfig.json

  echo -e "\r\n\033[01;32mAdd the following code to \"package.json\":
  \"scripts\": {
    \"start\": \"tsnd --transpile-only --ignore-watch node_modules --respawn src/server.ts\"
  },
  "
}

createGitignoreNode() {
  touch .gitignore
  echo "
# Logs
logs
*.log
npm-debug.log*
yarn-debug.log*
yarn-error.log*
lerna-debug.log*

# Diagnostic reports (https://nodejs.org/api/report.html)
report.[0-9]*.[0-9]*.[0-9]*.[0-9]*.json

# Runtime data
pids
*.pid
*.seed
*.pid.lock

# Directory for instrumented libs generated by jscoverage/JSCover
lib-cov

# Coverage directory used by tools like istanbul
coverage
*.lcov

# nyc test coverage
.nyc_output

# Grunt intermediate storage (https://gruntjs.com/creating-plugins#storing-task-files)
.grunt

# Bower dependency directory (https://bower.io/)
bower_components

# node-waf configuration
.lock-wscript

# Compiled binary addons (https://nodejs.org/api/addons.html)
build/Release

# Dependency directories
node_modules/
jspm_packages/

# Snowpack dependency directory (https://snowpack.dev/)
web_modules/

# TypeScript cache
*.tsbuildinfo

# Optional npm cache directory
.npm

# Optional eslint cache
.eslintcache

# Microbundle cache
.rpt2_cache/
.rts2_cache_cjs/
.rts2_cache_es/
.rts2_cache_umd/

# Optional REPL history
.node_repl_history

# Output of 'npm pack'
*.tgz

# Yarn Integrity file
.yarn-integrity

# dotenv environment variables file
.env
.env.test

# parcel-bundler cache (https://parceljs.org/)
.cache
.parcel-cache

# Next.js build output
.next
out

# Nuxt.js build / generate output
.nuxt
dist

# Gatsby files
.cache/
# Comment in the public line in if your project uses Gatsby and not Next.js
# https://nextjs.org/blog/next-9-1#public-directory-support
# public

# vuepress build output
.vuepress/dist

# Serverless directories
.serverless/

# FuseBox cache
.fusebox/

# DynamoDB Local files
.dynamodb/

# TernJS port file
.tern-port

# Stores VSCode versions used for testing VSCode extensions
.vscode-test

# yarn v2
.yarn/cache
.yarn/unplugged
.yarn/build-state.yml
.yarn/install-state.gz
.pnp.*" >> .gitignore
}

if [[ "$1"  ]]; then
  while [[ "$1"  ]]; do
    case "$1" in
      -h | --help) usage && exit 0;;
      -v | --version) echo Version 1.0 && exit 0;;
      *) echo Invalid option && exit 1;
    esac
    shift
  done
else
  askForWay
fi

